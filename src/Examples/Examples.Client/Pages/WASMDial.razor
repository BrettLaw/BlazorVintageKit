@page "/wasmdial"
@rendermode InteractiveWebAssembly

<h3>WASMDial</h3>

<div class="dial-container" style="width:300px;height:300px; background-color:darkslategrey;"> 

    <svg class="dial" viewBox="0 0 100 100">

        <!--Outer dial perimeter-->
        <circle cx="50" cy="50" r="45" fill="@bgcolour" />


        <!-- Risk segment -->
        <g transform="translate(50, 50) rotate(@segmentRotation)"> 
            <path d="M 0 0 L 45 0 A 45 45 0 0 1 @segment.Item1 @segment.Item2 Z" fill="darkred" />
        </g>

        <!-- Circle edge colour -->
        <circle cx="50" cy="50" r="45" stroke="@colour" stroke-width="2" fill="none" />

        @if (showInnerRing)
        {
            <!--Inner dial arc-->
            <g transform="translate(50, 50) rotate(@rotation)">
                <path d="M 0 @(dialMarkerDiameter*-1) A @dialMarkerDiameter @dialMarkerDiameter 0 1 1 @(dialMarkerDiameter*-1) 0" stroke="@colour" stroke-width="0.8" fill="none" />
            </g>
            @if (smithsMode)
            {
                <g transform="translate(50, 50) rotate(@rotation)">
                    <path d="M 0 @((dialMarkerDiameter-5)*-1) A @((dialMarkerDiameter-5)) @((dialMarkerDiameter-5)) 0 1 1 @((dialMarkerDiameter-5)*-1) 0" stroke="@colour" stroke-width="0.8" fill="none" />
                </g>
            }
        }

        <!-- combined -->
        <g transform="translate(50, 50) rotate(@rotation)">
            @for (int i = 0; i <= (indicatorCount * 5); i++)
            {
                var angle = i * (270.0 / ((indicatorCount * 5))); // 270 degrees divided by the total number of small intervals
                if (i % 5 == 0) // Every 5th mark is a large mark
                {
                    <line x1="0" y1="@((dialMarkerDiameter-5)*-1)" x2="0" y2="@(dialMarkerDiameter*-1)" stroke="@colour" stroke-width="0.5" transform="rotate(@angle)"/>
                }
                else // Small marks
                {
                    <line x1="0" y1="@((dialMarkerDiameter-5)*-1)" x2="0" y2="@((dialMarkerDiameter)*-1)" stroke="@colour" stroke-width="0.2" transform="rotate(@angle)"/>
                }
            }
        </g>

        <!-- text labels -->
        <g transform="translate(50, @(50+charYOffset))">
            @{

                var angleoffset = (rotation*-1);

                var textoffset = (dialMarkerDiameter-10)*-1;
                for (int i = 0; i <= indicatorCount; i++)
                {
                    var angle = angleoffset - i * (270/indicatorCount); // Adjust the angle calculation
                    var radians = angle * Math.PI / 180; // Convert angle to radians
                    var x = textoffset * Math.Sin(radians); // Calculate x position
                    var y = textoffset * Math.Cos(radians); // Calculate y position

                    <text><text x="@x" y="@y" font-size="6" text-anchor="middle" fill="@colour">@((i * indicatorRange / 100).ToString())</text></text>
                }
            }
        </g>

        <!-- pointer -->
        <g transform="rotate(@rotation 50 50)">

            <polygon points="49.5,8 50.5,8 51,65 49,65" fill="@pointercolour" transform="rotate(@barValue 50 50)" id="pointer" />

            @* <polygon points="49.5,8 50.5,8 51,65 49,65" fill="@pointercolour" transform="rotate(@barValue 50 50)" id="pointer" /> *@

            <!--<polygon points="50,10 53,20 51,60 49,60 47,20" fill="@pointercolour" transform="rotate(@barValue 50 50)" id="pointer" />
            -->
        </g>

        <!--center-->
        <circle cx="50" cy="50" r="3" stroke-width="2" fill="@colour" />
        <circle cx="50" cy="50" r="1" stroke-width="2" fill="@bgcolour" />

        <!-- Text -->
        <g transform="translate(50, 50)">
            <text x="0" y="10" font-size="5" text-anchor="middle" fill="@colour">@CenterLabel</text>

            <text x="0" y="@keyTextY" font-size="5" text-anchor="middle" fill="@colour">@BottomLabel</text>
        </g>

    </svg>




</div>

<div>
    <p>Dial Range = @DialRange</p>
    <p>Target Value = @targetValue</p>
    <p>Dial Value = @DialValue</p>
    <p>Increment = @increment</p>
    <p>barValue = @barValue</p>
</div>


<label> <input type="checkbox" @onchange="OnAnimateChanged" /> Animate </label>


<div class="demo-panel">
    <div class="form-group">
        <div style="margin-left:10px;">
            <label for="DialValue" class="form-label">Dial Value:</label>
            <input type="number" @onchange="DialValueChanged" @bind="DialValue" @bind:event="oninput" class="form-control" id="DialValue" step="100" style="min-width:6ch;" />
        </div>
        <div style="margin-left:10px;">
            <label for="DialRange" class="form-label">Dial Range:</label>
            <input type="number" @onchange="DialRangeChanged" @bind="DialRange" @bind:event="oninput" class="form-control" id="DialRange" step="100" style="min-width:6ch;" />
        </div>
        <div style="margin-left:10px;">
            <label for="indicatorCount" class="form-label">Indicator Count:</label>
            <input type="number" @onchange="IndicatorCountChanged" @bind="indicatorCount" @bind:event="oninput" class="form-control" id="indicatorCount" step="1" style="min-width:6ch;" />
        </div>


        <div style="margin-left:10px;">
            <label for="ArcAngleChanged" class="form-label">Segment Angle:</label>
            <input type="number" @bind="arcAngle" @onchange="ArcAngleChanged" @bind:event="oninput" class="form-control" id="ArcAngleChanged" step="5" style="min-width:6ch;" />
        </div>

        <div style="margin-left:10px;">
            <label for="segmentRotation" class="form-label">Segment rotation:</label>
            <input type="number" @bind="segmentRotation" @bind:event="oninput" class="form-control" id="segmentRotation" step="5" style="min-width:6ch;" />
        </div>

        <div style="margin-left:10px;">
            <label for="dialMarkerDiameter" class="form-label">dialMarkerDiameter:</label>
            <input type="number" @bind="dialMarkerDiameter" @bind:event="oninput" class="form-control" id="dialMarkerDiameter" step="5" style="min-width:6ch;" />
        </div>

        <div style="margin-left:10px;">
            <label for="rotation" class="form-label">rotation:</label>
            <input type="number" @bind="rotation" @bind:event="oninput" class="form-control" id="rotation" step="5" style="min-width:6ch;" />
        </div>

        <div style="margin-left:10px;">
            <label for="keyTextY" class="form-label">keyTextY:</label>
            <input type="number" @bind="keyTextY" @bind:event="oninput" class="form-control" id="keyTextY" step="1" style="min-width:6ch;" />
        </div>

        <div style="margin-left:10px;">
            <label for="showInnerRing" class="form-label">Inner Ring:</label>
            <label>
                <input type="checkbox" @bind="showInnerRing" />
            </label>
            <label for="smithsMode" class="form-label">smithsMode:</label>
            <label>
                <input type="checkbox" @bind="smithsMode" />
            </label>
        </div>
    </div>
</div>



@code {
    //param
    private int DialRange = 10000;
    //param
    private int DialValue = 0;

    private float barValue = 0;

    private float increment = 0;

    private bool showInnerRing = false;
    private bool smithsMode = false;

    private bool isAnimating;

    private int indicatorCount = 10;
    private int indicatorRange => DialRange / indicatorCount;

    private int charYOffset = 2;

    private int dialMarkerDiameter = 40;

    private int keyTextY = 25;

    private int rotation = 225;


    private string bgcolour = "black";
    private string colour = "white";
    private string pointercolour = "#FFFF00";

    private (double, double) segment;
    private int arcRadius = 45;
    private int arcAngle = 45;
    private int segmentRotation = 0;



    private string CenterLabel = "BVK";
    private string BottomLabel = "RPM x 100";

    protected override void OnInitialized()
    {
        //90 degrees missing.
        increment = 270f / DialRange;


        segment = CalculateEndpoint(arcRadius, arcAngle);

    }


    private void OnAnimateChanged(ChangeEventArgs e)
    {
        isAnimating = (bool)e.Value!;
        if (isAnimating)
        { StartAnimation(); }
    }
    private async void StartAnimation()
    {
        while (isAnimating)
        {
            PerformAnimationStep();
            await Task.Delay(100);
        }
    }

    private void DialValueChanged()
    {
        barValue = DialValue * increment;
    }

    private void DialRangeChanged()
    {
        increment = 270f / DialRange;
    }

    private void IndicatorCountChanged()
    {
        
    }
    protected void ArcAngleChanged()
    {
        segment = CalculateEndpoint(arcRadius, arcAngle);
    }


    private int targetValue = 0;
    private int speed = 100;
    private Random random = new Random();
    private void PerformAnimationStep()
    {
        bool isWithinRange = Math.Abs(DialValue - targetValue) <= speed;
        if (isWithinRange)
        {
            targetValue = random.Next(0, DialRange);

            int delta = Math.Abs(DialValue - targetValue)/4;
            if (delta < 50) delta = 100;

            speed = random.Next(50, delta);
        }

        if (DialValue > targetValue)
        {
            DialValue -= speed;
        }
        else if (barValue < targetValue)
        {
            DialValue += speed;
        }


        barValue = DialValue * increment;


        StateHasChanged();
    }


    public static (double, double) CalculateEndpoint(double radius, double angle)
    {
        double radians = Math.PI * angle / 180.0; // Convert angle to radians
        double x = radius * Math.Cos(radians);    // Calculate x-coordinate
        double y = radius * Math.Sin(radians);    // Calculate y-coordinate
        return (x, y);
    }




}
